class Solution {
  
    int max(int a, int b){if(a>b)return a; else return b;}
    int min(int a, int b){if(a<b)return a; else return b;}
  
        
    int[] getIntersection(int[] a, int[] b){
        int result[] = new int[2];
        if(a[0]<=b[0])
            result[0] = a[0]; 
        else result[0] = b[0]; 

        if(a[1]<b[1])
            result[1] = a[1];
        else result[1] = b[1];
            
        return result;
    }
    
    public int[][] intervalIntersection(int[][] A, int[][] B) {
        int result[][] = new int[A.length + B.length][2];
        int count = 0;
        int lastCheckedA = 0, lastCheckedB = 0;
         
        while(lastCheckedA<A.length && lastCheckedB<B.length){
            if(B[lastCheckedB][0]<=A[lastCheckedA][1] && A[lastCheckedA][0]<=B[lastCheckedB][1]){
                result[count][0]=max(B[lastCheckedB][0], A[lastCheckedA][0]);
                result[count][1]=min(B[lastCheckedB][1], A[lastCheckedA][1]);
                count ++;
            }
            if(A[lastCheckedA][1] > B[lastCheckedB][1]) lastCheckedB++;
                else lastCheckedA++;
        }
        
        int resultCopy[][] = new int[count][2];
        for(int i = 0 ; i < count; i ++){
            resultCopy[i][0] = result[i][0];
            resultCopy[i][1] = result[i][1];
        }
        
        // for(int i = 0 ; i < A.length; i++){
        //     for(; lastCheckedB < B.length; lastCheckedB++){
        //         if(A[i][0]>B[lastCheckedB][1]){
        //         } else if(A[i][0]>=B[lastCheckedB][0]){
        //              result[i+lastCheckedB][0] = A[i][0];
        //             // result[i+lastCheckedB][0] = B[lastCheckedB][0];
        //             if(A[i][1]>=B[lastCheckedB][1])
        //             result[i+lastCheckedB][1] = B[lastCheckedB][1];
        //             else
        //             result[i+lastCheckedB][1] = A[i][1];
        //         } else {
        //             result[i+lastCheckedB][0] = B[lastCheckedB][0];
        //             if(A[i][1]>=B[lastCheckedB][1])
        //             result[i+lastCheckedB][1] = B[lastCheckedB][1];
        //             else
        //             result[i+lastCheckedB][1] = A[i][1];
        //         }
        //     }
        // }
        
        
//         for(int i = 0 ; i < A.length; i++){
//             while(lastCheckedA < A.length && A[lastCheckedA][1]<B[lastCheckedB][0])
//                 lastCheckedA++;
//             while(lastCheckedB < B.length && B[lastCheckedB][1]<A[i][0])
//                 lastCheckedB++;

//             if(lastCheckedA < A.length){
//                 result[lastCheckedB+A.length][0] = max(A[lastCheckedA][0], B[lastCheckedB][0]);
//                 result[lastCheckedB+A.length][1] = min(A[lastCheckedA][1], B[lastCheckedB][1]);
//             }
//             if(lastCheckedB < B.length){
//                 result[i][0] = max(B[lastCheckedB][0], A[i][0]);
//                 result[i][1] = min(B[lastCheckedB][1], A[i][1]);
//             }
//         }  
        
        // lastChecked = 0;
        // for(int i = 0 ; i < B.length; i++){
        //     while(lastChecked < A.length && A[lastChecked][1]<B[i][0])
        //         lastChecked++;
            
            // if(lastChecked < A.length){
            //     result[i+A.length][0] = max(A[lastChecked][0], B[i][0]);
            //     result[i+A.length][1] = min(A[lastChecked][1], B[i][1]);
            // }
        //}  
        
        return resultCopy;
    }
}
