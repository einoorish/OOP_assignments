class Solution {
    
//    int min = 0;

//     public int count(int amount, int[] coins) {
//         int result = 0;
//         if(amount == 0) return 1;
        
//         for (int i = min; i < coins.length; i++) {

//             if (amount - coins[i] == 0) return result + 1;
//             else if (amount - coins[i] > 0) {
//                 min = i;
//                 result += count(amount - coins[i], coins);
//             }
//         }

//         return result;
//     }
    
    int change(int i, int amount, int[] coins, int[][] dp){
        if(amount == 0) return 1;
        if(amount < 0 || i == coins.length) return 0;
        if(dp[i][amount] != -1) return dp[i][amount];
       
        dp[i][amount] = change(i, amount - coins[i], coins, dp) + change(i + 1, amount, coins, dp);
        return dp[i][amount];
    }
    
    public int change(int amount, int[] coins) {
        int[][] dp = new int[coins.length][amount + 1];
        for(int i = 0; i < coins.length; i++){
            Arrays.fill(dp[i], -1);
        }
       return change(0, amount, coins, dp);
    }
}
